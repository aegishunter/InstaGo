package repository

import (
	model "instago/model"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// PostsRepositoryInterface is an autogenerated mock type for the PostsRepositoryInterface type
type PostsRepositoryMockInterface struct {
	mock.Mock
}

// AddPost provides a mock function with given fields: userId, fileName, description
func (_m *PostsRepositoryMockInterface) AddPost(userId int, fileName string, description string) error {
	ret := _m.Called(userId, fileName, description)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = rf(userId, fileName, description)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePostById provides a mock function with given fields: id, user_id
func (_m *PostsRepositoryMockInterface) DeletePostById(id int, user_id int) error {
	ret := _m.Called(id, user_id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id, user_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPosts provides a mock function with given fields: idx
func (_m *PostsRepositoryMockInterface) GetAllPosts(idx int) ([]model.Post, error) {
	ret := _m.Called(idx)

	var r0 []model.Post
	if rf, ok := ret.Get(0).(func(int) []model.Post); ok {
		r0 = rf(idx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountTotalPosts provides a mock function with given fields:
func (_m *PostsRepositoryMockInterface) GetCountTotalPosts() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostDetailsById provides a mock function with given fields: id, user_id
func (_m *PostsRepositoryMockInterface) GetPostDetailsById(id int, user_id int) (*model.Post, error) {
	ret := _m.Called(id, user_id)

	var r0 *model.Post
	if rf, ok := ret.Get(0).(func(int, int) *model.Post); ok {
		r0 = rf(id, user_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDescription provides a mock function with given fields: description, id
func (_m *PostsRepositoryMockInterface) UpdateDescription(description string, id int) error {
	ret := _m.Called(description, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(description, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPostsRepositoryInterface creates a new instance of PostsRepositoryInterface. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostsRepositoryMockInterface(t testing.TB) *PostsRepositoryMockInterface {
	mock := &PostsRepositoryMockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
